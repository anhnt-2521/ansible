# Pre_task
- name: BASE > Install aptitude
  apt:
    name: aptitude
    state: present
  become: yes

# Create group admin
- name: BASE > Add group admin exists
  group:
    name: admin
    state: present
    gid: 400
  become: yes

# Create & config deploy user
- name: BASE > Add the user {{ deploy_user }}
  user:
    name: "{{ deploy_user }}"
    groups: admin,sudo
    state: present
    shell: /bin/bash
    append: yes
    createhome: yes
    home: /home/{{ deploy_user }}
  become: yes

- name: BASE > No ask password when sudo
  lineinfile:
   path: /etc/sudoers
   state: present
   line: 'deploy ALL=(ALL) NOPASSWD:ALL'
   validate: visudo -cf %s
  become: yes

- name: BASE > Create folder .ssh
  file:
    path: /home/{{ deploy_user }}/.ssh
    state: directory
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: 0700
  become: yes
  
# Base role task
- name: BASE > Check distribution
  debug:
    var: "{{ item }}"
  loop:
    - ansible_distribution
    - ansible_distribution_version
  failed_when:
    - ansible_distribution != 'Ubuntu' or ansible_distribution_version != '18.04'

- name: BASE > Install packages for front server
  apt:
    name: "{{ item }}"
    state: latest
    update_cache: yes
  loop:
    - tcl-dev
    - gettext
    - fail2ban
    - openssl
    - python-pip
    - make
    - wget
    - unzip
    - logrotate
    - zlib1g-dev
    - libssl-dev
    - libreadline6-dev
    - libncurses5-dev
    - libxml2-dev
    - libxslt1-dev
    - libcurl4-openssl-dev
    - libexpat1-dev
    - libz-dev
    - libssl-dev
    - libffi-dev
    - libyaml-dev
    - libsqlite3-dev
    - sqlite3
    - software-properties-common
    - build-essential
    - socat
    - apt-transport-https
    - curl    
    - supervisor
    - vim
    - git
  become: yes

# Set PAM limits
- name: BASE > Set PAM limits
  pam_limits:
    domain: "*"
    limit_type: "-"
    limit_item: nofile
    value: "{{ base_maxopenfile }}"
    use_max: yes
  become: yes

- name: BASE > Reload settings system configuration files
  shell: sysctl --system
  become: yes

# Install ntp/ server chronyd
- name : BASE > Install service ntp 
  apt:
    name: ntp
    state: present
  become: yes

- name: BASE > Enable service ntp
  service:
    name: ntp
    state: started
    enabled: yes
  tags: ntp

- name: BASE > Check status service ntp
  command: systemctl status ntp
  register: ntp_status
- debug: var=ntp_status.stdout_lines

# Set TimeZone
- name: BASE > Set timezone to Asia/Tokyo
  timezone:
    name: "{{ base_timezone }}"
  become: yes

- name: BASE > Check datetime on server 
  command: timedatectl
  register: datetime_status
- debug: var=datetime_status.stdout_lines
